rm(list = ls())
setwd("/vol/fantom/counts/fantom6-collaboration.gsc.riken.jp/files/expression_tables/LQ-ssCAGE/gene/")
getwd()
library(edgeR)
files <- dir(pattern="*\\.tsv$")
y<-readDGE(files)
rownames(y$counts)
colnames(y$counts)
head(y$counts)
sampleinfo_org<-y$samples
setwd("/vol/fantom/Stimulated_vs_Native")
library(BiocParallel)
library(readxl)
library(DESeq2)
library(limma)
library(Glimma)
library(gplots)
library(RColorBrewer)
library(NMF)
library(org.Hs.eg.db)
library(conflicted)
library(raster)
library(variancePartition)
library(zenith)
library(gplots)
library(ggplot2)
library(EnrichmentBrowser)
library(GSEABase)
library(dplyr)
library(xlsx)
library(kableExtra)
library(tidyverse)
library(magrittr)
library(scales)
library(pander)
library(ggrepel)
library(plotly)
conflicts_prefer(base::as.data.frame)
conflict_prefer("topTable", "variancePartition")
conflict_prefer("eBayes", "variancePartition")
conflict_prefer("register", "BiocParallel")
conflict_prefer("metadata", "raster")
conflict_prefer("filter", "dplyr")
conflicts_prefer(base::as.data.frame)
# conflict_prefer("eBayes", "limma")
# conflict_prefer("topTable", "limma")

# Specify parallel processing parameters
# this is used implicitly by dream() to run in parallel
param = SnowParam(28, "SOCK", progressbar=TRUE)
register(param)

# write.table(sampleinfo, file='sampleinfo.tsv', quote=TRUE, sep='\t', col.names = NA)
sampleinfo <- read.delim("/vol/fantom/sampleinfo.tsv", stringsAsFactors = FALSE)
rownames(sampleinfo)<- sampleinfo[,1]
sampleinfo <- sampleinfo[,-(1:1)]
table(rownames(sampleinfo)==colnames(y$counts))
y$samples<-sampleinfo
countdata<-y$counts
countdata <- countdata[-(1:1), ]
countdata<-countdata[order(row.names(countdata)), ]
sapply(countdata, class)
y$counts<-countdata
ann <- read.delim("/vol/fantom/F6_CAT.gene.info.tsv", stringsAsFactors = FALSE)
rownames(ann)<- ann[,1]
ann<-ann[order(row.names(ann)), ]
table(ann$geneID==row.names(countdata))
y$genes<-ann
#######################################
y1 <- sumTechReps(y, y$samples$SampleName)
dim (y1)
y1$samples
#######################################
cor(sampleinfo$lib.size, y$samples$lib.size)
##########################Subseting of DGEList for MALAT1 KD vs Non KD #######################################
y2 <-y1[,which(!y1$samples$target_gene_symbol == "MALAT1")]
y3 <-y2[,which(!y2$samples$Rep == "BR2")]
y4 <-y3[,which(!y3$samples$Rep == "BR3")]
y5 <-y4[,which(!y4$samples$Rep == "BR4")]
y6 <-y5#[,which(!y5$samples$Rep == "BR6")]
y7 <-y6[,which(!y6$samples$Rep == "BR1")]
y1 <-y7[,which(!y7$samples$Rep == "BR10")]
dim(y1)
table(y1$samples$SampleName==colnames(y1$counts))
#######################################
# Obtain CPMs
myCPM <- cpm(y1$count)
head(myCPM)
thresh <- myCPM > 5
head(thresh)
table(rowSums(thresh))
keep <- rowSums(thresh) >= 5
summary(keep)
plot(myCPM[,1],y1$counts[,1], ylim=c(0,50),xlim=c(0,20))
abline(v=5)
abline(h=14)
dev.off()
y2 <- y1[keep, keep.lib.sizes=FALSE]
##########################Apply normalisation to DGEList object###########################
geneExpr<-calcNormFactors(y2,method =c("TMM"))
##########################write out TMM normalized LogCPM expression###########################
logCPM_geneExpr<- cpm(y1, log=TRUE, normalized.lib.sizes = T, prior.count=3)
# logCPM_geneExpr_noNorm<- cpm(y2, log=TRUE, normalized.lib.sizes = F, prior.count=3)

write.table(logCPM_geneExpr, file='/vol/fantom/Stimulated_vs_Native/logCPM_geneExpr_normalized.tsv', quote=TRUE, sep='\t', col.names = NA)
#######################################
State<-geneExpr$samples$State
State<-factor(State)
State<-relevel(State, ref="Native")
geneExpr$samples$State <- State

Batch<-geneExpr$samples$Batch
Batch<-factor(Batch)
geneExpr$samples$Batch<-Batch

Tissue<-geneExpr$samples$Tissue
Tissue<-factor(Tissue)
Tissue<-relevel(Tissue, ref="Foreskin")
geneExpr$samples$Tissue<-Tissue

Block<-geneExpr$samples$Rep
Block<-factor(Block)
geneExpr$samples$Block<-Block

metadata<-geneExpr$samples
# metadata<-metadata[,-(4:4)]
# metadata<-metadata[,-(12:12)]

##########################QC Plots###########################
plotMDSnormalized<-plotMDS(geneExpr)
dev.off()

pca <- geneExpr %>%
  cpm(log = TRUE) %>%
  t() %>%
  prcomp() 
summary(pca)$importance %>% pander(split.tables = Inf)
names(pca)
pca$x[1:10,1:10]
var_explained <- pca$sdev^2/sum(pca$sdev^2)
var_explained[1:10]

pca
plotly::ggplotly(
  pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(rownames_to_column(geneExpr$samples,"sample")) %>%
    ggplot(aes(PC1, PC2, colour = Tissue, shape=State, legend=SampleName)) +
    geom_point(size = 3) +
    labs(x=paste0("PC1: ",round(var_explained[1]*100,1),"%"),
         y=paste0("PC2: ",round(var_explained[2]*100,1),"%")) +
    
    theme_bw()
)

# Perform PCA with 3 principal components on geneExpr
pca_result <- geneExpr %>%
  cpm(log = TRUE) %>%
  t() %>%
  prcomp()

# Convert pca_result$x to a data frame
pca_df <- as.data.frame(pca_result$x)

# Create interactive 3D scatter plot
plot_ly(pca_df, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Tissue, symbol = ~State) %>%
  add_markers() %>%
  layout(scene = list(xaxis = list(title = "PC1 49,3 %", showgrid = TRUE, gridcolor = "white"),
                      yaxis = list(title = "PC2 16,7 %", showgrid = TRUE, gridcolor = "white"),
                      zaxis = list(title = "PC3 11,3 %", showgrid = TRUE, gridcolor = "white"),
                      bgcolor = 'rgb(0, 0, 0)'
                      ))

###########################Heatmap##############################
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logCPM_geneExpr, 1, var)
head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
# Subset logcounts matrix
highly_variable_lcpm <- logCPM_geneExpr[select_var,]
dim(highly_variable_lcpm)
head(highly_variable_lcpm)

## Get some nicer colours using Rcolorbrewer
display.brewer.all()
mypalette <- brewer.pal(11,"RdYlBu")
## http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.cell <- c("purple","orange")[geneExpr$samples$State]
# Plot and save the heatmap
pdf(file="High_var_genes.heatmap_StimulatedvsNative.pdf",width = 36, height = 36)
aheatmap(highly_variable_lcpm,col=rev(morecols(50)),main="Top 500 most variable genes\nacross samples",annCol=geneExpr$samples[,11:12],labCol=geneExpr$samples$SampleName, scale="row")
dev.off()
# Save the heatmap
png(file="High_var_genes.heatmapStimulatedvsNative.png")
aheatmap(highly_variable_lcpm2,col=rev(morecols(50)),main="Top 500 most variable genes\nacross samples",annCol=geneExpr$samples[,11:12],labCol=geneExpr$samples$SampleName, scale="row")
dev.off()
# Save the heatmap
pdf(file="High_var_genes.heatmap_new.pdf",width = 24, height = 24)
heatmap.2(merged_data_sb,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",ColSideColors=col.cell, scale="row", margins = c(24,24), cexRow=2)
dev.off()
############################################# DREAM Analysis##################################
form <- ~State + (1|Batch) + (1|Tissue)+ (1|Block)
# estimate weights using linear mixed model of dream
vobjDream = voomWithDreamWeights(geneExpr, form, geneExpr$samples, BPPARAM=param)
# Fit the dream model on each gene
# By default, uses the Satterthwaite approximation for the hypothesis test
# form <- ~0 + group + (1|Tissue) + (1|Rep) 
# L = makeContrastsDream( form, metadata, contrasts = c("Control.Stimulated - Control.Native", "KD1.Stimulated - KD1.Native", "KD2.Stimulated - KD2.Native", "KD1.Native - Control.Native", "KD2.Native - Control.Native"))
# Visualize contrast matrix plotContrasts(L)
fitmmKR = dream( vobjDream, form, geneExpr$samples, ddf="Kenward-Roger", BPPARAM=param)
fitmm = eBayes(fitmmKR)
results <- decideTests(fitmm)
summary(results)
colnames(fitmm)

StimulatedvsNaive <-topTable(fitmm, coef="StateStimulated", sort.by = "P", n = Inf)
write.table(StimulatedvsNaive, file='StimulatedvsNaive_gene_Dream.tsv', quote=FALSE, sep='\t', col.names = NA)

#############################################Limma Analysis##################################
# Limma has a built-in approach for analyzing repeated measures data using duplicateCorrelation().The model can handle a single random effect, and forces the magnitude of the random effect to be the same across all genes.
form <- ~State + Tissue + Batch
dsgn = model.matrix(form, geneExpr$samples)
colnames(dsgn) <- gsub("group", "", colnames(dsgn))
vobj_tmp = voom( geneExpr, dsgn, plot=FALSE)
dupcor <- duplicateCorrelation(vobj_tmp,dsgn,block=Block)
# run voom considering the duplicateCorrelation results in order to compute more accurate precision weights
# Otherwise, use the results from the first voom run
vobj = voom( geneExpr, dsgn, plot=TRUE, block=Block, correlation=dupcor$consensus.correlation)
# Estimate linear mixed model with a single variance component
# Fit the model for each gene,
dupcor <- duplicateCorrelation(vobj, dsgn, block=Block)

# But this step uses only the genome-wide average for the random effect
fitDupCor <- lmFit(vobj, dsgn,  block=Block, correlation=dupcor$consensus.correlation)

# cont.matrix <- makeContrasts(Control.Stimulated - Control.Native, KD.Stimulated - KD.Native, KD.Native - Control.Native, KD.Stimulated - Control.Stimulated, levels=design)
# ft.cont <- contrasts.fit(fitDupCor, cont.matrix)
# fit.cont <- eBayes(fitDupCor)
# dim(fit.cont)
# summa.fit <- decideTests(fit.cont)
# summary(summa.fit)

# Fit Empirical Bayes for moderated t-statistics
fitDupCor <- eBayes(fitDupCor)
dim(fitDupCor)
summa.fit <- decideTests(fitDupCor)
colnames(summa.fit)
# summa.fit <- decideTests(fitDupCor,method="separate",adjust.method="fdr",p.value=0.05,lfc=1)
summary(summa.fit)

#############################################Gene set einrichment Analysis with Zenith ##################################

msdb.gs = get_MSigDB("H", to="ENSEMBL")
res.gsa.MSigDB = zenith_gsa(fitmm, msdb.gs, 'StateStimulated', progressbar=T )
kable_styling(kable(res.gsa.MSigDB, row.names=FALSE))
write.table(res.gsa.MSigDB, file='res.gsa.MSigDB_StimulatedvsNaive_gene_Dream.tsv', quote=FALSE, sep='\t', col.names = NA)

plotZenithResults(res.gsa.MSigDB)
dev.off()

gs.kegg = getGenesets( org = "hsa", 
                        db = "enrichr", 
                        lib = "KEGG_2021_Human",
                        gene.id.type = "ENSEMBL", 
                        return.type = "GeneSetCollection")
res.gsa.kegg = zenith_gsa(fitmm, gs.kegg, 'StateStimulated', progressbar=T )
kable_styling(kable(res.gsa.kegg, row.names=FALSE))
write.table(res.gsa.kegg, file='res.gsa.kegg_StimulatedvsNaive_gene_Dream.tsv', quote=FALSE, sep='\t', col.names = NA)

plotZenithResults(res.gsa.kegg)
dev.off()


write.table(res_zenith, file='ZenithGO_BR5to9_Dream_form_State_1Block_1Tissue_1Batch.tsv', quote=FALSE, sep='\t', col.names = NA)
write.table(res.gsa, file='ZenithPathways_BR5to9_Dream_form_State_1Block_1Tissue_1Batch.tsv', quote=FALSE, sep='\t', col.names = NA)
write.table(res_camera, file='CameraGO_BR5to9_Dream_form_State_1Block_1Tissue_1Batch.tsv', quote=FALSE, sep='\t', col.names = NA)

# Run camera
dsgn = model.matrix(form, geneExpr$samples)
res_camera = camera( vobj, index, dsgn, inter.gene.cor=NA, contrast="StateStimulated")
res_camera[1:8,] %>% kable %>% kable_styling(full_width = FALSE) 

df = merge(res_camera, res_zenith, by="row.names")
plot(df$Correlation.x, df$Correlation.y, xlab="Correlation from zenith", ylab="Correlation from camera")
abline(0, 1, col="red")
dev.off()

##############################################################################################################################
